#!/usr/bin/python3
import gefp
import tutor.psithon.util
from tutor.project_2.cis import CIS, MCState
import tutor.project_3.surface_hopping as sh, numpy, time
from tutor.project_1.population import atomic_charges, Loc
numpy.set_printoptions(precision=4, linewidth=200, suppress=True)

mol = tutor.psithon.util.psi_molecule_from_file('water.xyz')

set {
 scf_type pk
 basis sto-3g
 e_convergence 1e-8
 reference uhf
}
if 0:
   e, wfn = energy('scf', molecule=mol, return_wfn=True)
   psi4.check_iwl_file_from_scf_type(psi4.core.get_global_option('SCF_TYPE'), wfn)
   O = psi4.core.MOSpace.occ()
   V = psi4.core.MOSpace.vir()
   spaces = [O, V]
   trans_type = psi4.core.IntegralTransform.TransformationType.Unrestricted
   ints = psi4.core.IntegralTransform(wfn, spaces, trans_type)
   ints.set_keep_dpd_so_ints(True)
   ints.transform_tei(O, O, V, V)
   ints.transform_tei(O, V, O, V)
   psi4.core.print_out('Integral transformation complete!\n')
   p = ints.get_psio()
   p.tocprint(61)


#c1 = CIS.create(mol, verbose=1, save_states=4, reference='rhf')
#c1.run()
##g = mol.geometry(); g.scale(1.001); mol.set_geometry(g)
#
#c2 = CIS.create(mol, verbose=1, save_states=7, reference='rhf')
#c2.run()
#
#m1 = MCState(c1)
#m2 = MCState(c2)
#
#s = m1.overlap(m2)
#print(s)

#e, wfn = energy('scf', molecule=mol, return_wfn=True)
#for k in numpy.linspace(0, 0.5, 20):
#    q = atomic_charges(wfn, k)
#    print("%13.2f %13.3f %13.3f %13.3f" % (k, q[0], q[1], q[2]))
#
#l = Loc(wfn, method='BOYS')
#la, lb = l.lmoc()

system = sh.DynamicalSystem(mol, dt_class=2.0, qm_method='psi4scf')
system.run(1000)
